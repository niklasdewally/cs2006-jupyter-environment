#!/usr/bin/env python3
import os,pathlib,sys,subprocess


nb_pip_extensions = ["widgetsnbextension",
                     "rise",
                     "nbdime"]

server_pip_extensions = ["nbdime"]

# https://jupyter-contrib-nbextensions.readthedocs.io/en/latest/nbextensions.html
nb_contrib_extensions = ["zenmode/main",
                         "code_prettify/autopep8",
                         "code_font_size/code_font_size"
                         ]

VENV_DIR = pathlib.Path(__file__).absolute().parent

def venv_call(command):
    """
    Call the given command in the virtual enviroment.
    """
    return subprocess.check_call(f"source {str(VENV_DIR)}/bin/activate;{command}",shell=True);

def setup_nb_pip_extensions(extensions):
    for extension in extensions:
        _install_nb_extension(extension,py=True)
        _enable_nb_extension(extension,py=True)

def setup_nb_contrib_extensions(extensions):
    venv_call("pip install jupyter_contrib_nbextensions")
    venv_call("jupyter contrib nbextension install --sys-prefix")
    for extension in extensions:
        _enable_nb_extension(extension,py=False)

def setup_nb_server_extensions(extensions):
    for extension in extensions:
        venv_call(f'jupyter nbextension install {extension} --py --sys-prefix')
        venv_call(f'jupyter serverextension enable {extension} --py --sys-prefix')

def _install_nb_extension(extension,py=True):
    return venv_call(f'jupyter nbextension install {extension} {"--py" if py else ""} --sys-prefix')

def _enable_nb_extension(extension,py=True):
    return venv_call(f'jupyter nbextension enable {extension} {"--py" if py else ""} --sys-prefix')


subprocess.run(f"python3 -m venv {str(VENV_DIR)}",shell=True)
venv_call(f"pip install -r requirements.txt")

setup_nb_pip_extensions(nb_pip_extensions)
setup_nb_server_extensions(server_pip_extensions)
setup_nb_contrib_extensions(nb_contrib_extensions)
